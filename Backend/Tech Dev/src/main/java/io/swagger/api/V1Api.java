/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.31).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ComentarioDTO;
import io.swagger.model.ErrorDto;
import io.swagger.model.LugarDto;
import io.swagger.model.VueloDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-22T16:08:57.773-05:00[America/Mexico_City]")
@Validated
public interface V1Api {

    @Operation(summary = "Elimina un lugar vuelo", description = "Regresa un objecto que contiene el vuelo eliminado", tags={ "Vuelos Aéreos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lugar eliminado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VueloDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/vuelo/{vueloId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<VueloDto> deleteFly(@Parameter(in = ParameterIn.PATH, description = "Identificador del vuelo generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("vueloId") String vueloId);


    @Operation(summary = "Elimina un lugar turístico", description = "Regresa un objecto que contiene el lugar turístico eliminado", tags={ "Hoteles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lugar eliminado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/hotel/{lugarId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<LugarDto> deleteHotel(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId);


    @Operation(summary = "Elimina un lugar turístico", description = "Regresa un objecto que contiene el lugar turístico eliminado", tags={ "Lugares Turísticos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lugar eliminado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/lugares/{lugarId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<LugarDto> deletePlace(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId);


    @Operation(summary = "Elimina un lugar turístico", description = "Regresa un objecto que contiene el lugar turístico eliminado", tags={ "Restaurantes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lugar eliminado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/resuaturant/{lugarId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<LugarDto> deleteRestaurant(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId);


    @Operation(summary = "Recupera todos los comentarios de un lugar en especifico", description = "Regresa un objecto que contiene todos los comentarios de un lugar en especifico", tags={ "Lugares Turísticos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa"),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/lugares/{lugarId}/comentarios",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> getComentarios(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId);


    @Operation(summary = "Recupera la lista completa de vuelos", description = "Regresa un objecto que contiene todos los vuelos", tags={ "Vuelos Aéreos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VueloDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/vuelo",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VueloDto> getFlies();


    @Operation(summary = "Recupera la información de un vuelo", description = "Regresa un objecto que contiene un vuelo", tags={ "Vuelos Aéreos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VueloDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/vuelo/{vueloId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VueloDto> getFly(@Parameter(in = ParameterIn.PATH, description = "Identificador del vuelo generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("vueloId") String vueloId);


    @Operation(summary = "Permite dar de alta un lugar turístico", description = "Permite dar de alta un producto, se valida que dicho producto no haya sido dado de alta previamente con el mismo nombre", tags={ "Hoteles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Creación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "400", description = "No se pudo crear el producto exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/hotel",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<LugarDto> getHotel(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody LugarDto body);


    @Operation(summary = "Recupera la lista completa de lugares turísticos", description = "Regresa un objecto que contiene todos los lugares turísticos", tags={ "Hoteles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/hotel",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<LugarDto> getHotels();


    @Operation(summary = "Recupera la información de un lugar turístico", description = "Regresa un objecto que contiene un lugar turístico", tags={ "Lugares Turísticos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/lugares/{lugarId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<LugarDto> getPlace(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId);


    @Operation(summary = "Recupera la lista completa de lugares turísticos", description = "Regresa un objecto que contiene todos los lugares turísticos", tags={ "Lugares Turísticos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/lugares",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<LugarDto> getPlaces();


    @Operation(summary = "Permite dar de alta un lugar turístico", description = "Permite dar de alta un producto, se valida que dicho producto no haya sido dado de alta previamente con el mismo nombre", tags={ "Restaurantes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Creación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "400", description = "No se pudo crear el producto exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/restaurant",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<LugarDto> getRestaurant(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody LugarDto body);


    @Operation(summary = "Recupera la lista completa de lugares turísticos", description = "Regresa un objecto que contiene todos los lugares turísticos", tags={ "Restaurantes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/restaurant",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<LugarDto> getRestaurants();


    @Operation(summary = "Modifica un vuelo", description = "Regresa el objecto modificado", tags={ "Vuelos Aéreos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Vuelo modificado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VueloDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/vuelo/{vueloId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<VueloDto> patchFly(@Parameter(in = ParameterIn.PATH, description = "Identificador del vuelo generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("vueloId") String vueloId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody VueloDto body);


    @Operation(summary = "Modifica un lugar turístico", description = "Regresa el objecto modificado", tags={ "Hoteles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lugar modificado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/hotel/{lugarId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<LugarDto> patchHotel(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody LugarDto body);


    @Operation(summary = "Modifica un lugar turístico", description = "Regresa el objecto modificado", tags={ "Lugares Turísticos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lugar modificado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/lugares/{lugarId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<LugarDto> patchPlace(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody LugarDto body);


    @Operation(summary = "Modifica un lugar turístico", description = "Regresa el objecto modificado", tags={ "Restaurantes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lugar modificado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/resuaturant/{lugarId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<LugarDto> patchRestaurant(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody LugarDto body);


    @Operation(summary = "Permite dar de alta un comentario en un lugar en especifico", description = "Permite dar de alta un comentario", tags={ "Lugares Turísticos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Creación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ComentarioDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "No se pudo crear el comentario", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/lugares/{lugarId}/comentarios",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ComentarioDTO> setComentarios(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ComentarioDTO body);


    @Operation(summary = "Permite dar de alta un vuelo", description = "Permite dar de alta un vuelo, se valida que dicho vuelo no haya sido dado de alta previamente", tags={ "Vuelos Aéreos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Creación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VueloDto.class))),
        
        @ApiResponse(responseCode = "400", description = "No se pudo crear el vuelo exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/vuelo",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<VueloDto> setFly(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody VueloDto body);


    @Operation(summary = "Permite dar de alta un lugar turístico", description = "Permite dar de alta un lugar, se valida que dicho producto no haya sido dado de alta previamente con el mismo nombre", tags={ "Lugares Turísticos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Creación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "400", description = "No se pudo crear el lugar exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/lugares",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<LugarDto> setPlace(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody LugarDto body);


    @Operation(summary = "Actualiza un vuelo turístico", description = "Regresa el objecto actualizado", tags={ "Vuelos Aéreos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Vuelo actualizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VueloDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/vuelo/{vueloId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<VueloDto> updateFly(@Parameter(in = ParameterIn.PATH, description = "Identificador del vuelo generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("vueloId") String vueloId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody VueloDto body);


    @Operation(summary = "Actualiza un lugar turístico", description = "Regresa el objecto actualizado", tags={ "Hoteles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lugar actualizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/hotel/{lugarId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<LugarDto> updateHotel(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody LugarDto body);


    @Operation(summary = "Actualiza un lugar turístico", description = "Regresa el objecto actualizado", tags={ "Lugares Turísticos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lugar actualizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/lugares/{lugarId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<LugarDto> updatePlace(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody LugarDto body);


    @Operation(summary = "Actualiza un lugar turístico", description = "Regresa el objecto actualizado", tags={ "Restaurantes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lugar actualizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/resuaturant/{lugarId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<LugarDto> updateRestaurant(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody LugarDto body);


    @Operation(summary = "Recupera la información de un lugar turístico", description = "Regresa un objecto que contiene un lugar turístico", tags={ "Hoteles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/hotel/{lugarId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<LugarDto> v1HotelLugarIdGet(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId);


    @Operation(summary = "Recupera todos los lugares con su tipo de zona y su ID", description = "Regresa un objecto que contiene todos los lugares con su tipo de zona y su ID", tags={ "Lugares Turísticos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa"),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/lugares/id/tipo",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> v1LugaresIdTipoGet();


    @Operation(summary = "Recupera todos los lugares con su precio general y su ID", description = "Regresa un objecto que contiene todos los lugares con su precio general y su ID", tags={ "Lugares Turísticos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa"),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/lugares/precios",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> v1LugaresPreciosGet();


    @Operation(summary = "Recupera la información de un lugar turístico", description = "Regresa un objecto que contiene un lugar turístico", tags={ "Restaurantes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/resuaturant/{lugarId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<LugarDto> v1ResuaturantLugarIdGet(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId);

}

