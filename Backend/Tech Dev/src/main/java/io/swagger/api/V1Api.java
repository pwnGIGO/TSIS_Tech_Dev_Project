/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.31).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ComentarioDto;
import io.swagger.model.ErrorDto;
import io.swagger.model.HospedajeDto;
import io.swagger.model.InlineResponse200;
import io.swagger.model.InlineResponse2001;
import io.swagger.model.LugarDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-25T20:53:21.707-05:00[America/Mexico_City]")
@Validated
public interface V1Api {

    @Operation(summary = "HU-5:Recupera la lista completa de hoteles", description = "Regresa un objecto que contiene todos los hoteles", tags={ "Hoteles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2001.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/hotel",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<HospedajeDto>> getHotels();


    @Operation(summary = "HU-2 y HU-6:Recupera la información de un lugar turístico", description = "Regresa un objecto que contiene un lugar turístico", tags={ "Lugares Turísticos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/lugares/{lugarId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<LugarDto> getPlace(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId);


    @Operation(summary = "HU-1 y HU-3:Recupera la lista completa de lugares turísticos", description = "Regresa un objecto que contiene todos los lugares turísticos", tags={ "Lugares Turísticos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa!", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "404", description = "No se ha encontrado...", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/lugares",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<LugarDto>> getPlaces();


    @Operation(summary = "HU-4:Permite dar de alta un comentario en un lugar en especifico", description = "Permite dar de alta un comentario", tags={ "Lugares Turísticos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Creación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LugarDto.class))),
        
        @ApiResponse(responseCode = "400", description = "No se pudo crear el comentario", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/lugares/{lugarId}/comentarios",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<LugarDto> setComentarios(@Parameter(in = ParameterIn.PATH, description = "Identificador del lugar generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("lugarId") String lugarId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ComentarioDto body);

}

